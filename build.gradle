import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'application'
    id 'c'
    id 'com.adarshr.test-logger' version '2.0.0'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '0.7'
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    jaxb
}

application {
    mainClassName = 'gui.JSpeccy'
    applicationDefaultJvmArgs = [
            // On Unix/Linux platforms using X11,
            // use OpenGL backend to avoid a bug redrawing the screen
            // (upper case True to verbose):
            //'-Dsun.java2d.opengl=True',

            // When doesn't exist a good OpenGL driver or X11 is using Mesa:
            //'-Dsun.java2d.xrender=false',

            '-DNATIVE_LIB_PLACEHOLDER'
    ]
}

distributions.main.contents {
    from("native") {
        into "native"
        include "**/*.so"
    }
}

startScripts.doLast {
    unixScript.text = unixScript.text.replace(
            'NATIVE_LIB_PLACEHOLDER',
            'java.library.path=\$APP_HOME/native/linux')
}

idea.project.settings.encodings {
    encoding = 'UTF-8'
    properties {
        encoding = 'US-ASCII'
        transparentNativeToAsciiConversion = true
    }
}

task genJSpeccySettingsClasses {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("build/generated/sources/JSpeccySettings/")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'configuration',
                schema: 'xml-resources/jaxb/JSpeccySettingsType/JSpeccy.xsd',
                language: 'WSDL'
        )
    }
}

def nativeLibraryPath = file("native/linux")

compileJava {
    // Also, for NetBeans editor needs to add "-J-Dfile.encoding=UTF-8"
    // to parameter "netbeans_default_options" in "etc/nebeans.conf".
    //
    // Gradle / Netbeans - Howto set encoding to UTF-8 in Editor and Compiler
    // https://stackoverflow.com/questions/59800221/gradle-netbeans-howto-set-encoding-to-utf-8-in-editor-and-compiler
    options.encoding = 'UTF-8'
    options.compilerArgs += [
            // to generate joystickinput_JoystickRaw.h header
            "-h", nativeLibraryPath
    ]
    source genJSpeccySettingsClasses
}

sourceSets.main.java.srcDirs += file("build/generated/sources/JSpeccySettings")

dependencies {
    implementation "com.sun.xml.bind:jaxb-core:$jaxbCoreVer"
    implementation "com.sun.xml.bind:jaxb-impl:$jaxbImplVer"
    implementation "javax.xml.bind:jaxb-api:$jaxbApiVer"
    jaxb(
            "com.sun.xml.bind:jaxb-core:$jaxbCoreVer",
            "com.sun.xml.bind:jaxb-xjc:$jaxbXjcVer",
            "javax.xml.bind:jaxb-api:$jaxbApiVer",
    )
    testImplementation "junit:junit:$junitVer"
}

jar.manifest.attributes(
        "Main-Class": 'gui.JSpeccy',
        "Class-Path": configurations.compile
                .collect { it.getName() }
                .join(' ')
)

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x64"
        }
    }
    buildTypes {
        release
    }
    components {
        joystickHelper(NativeLibrarySpec) {
            targetPlatform "x86"
            targetPlatform "x64"
            binaries.all {
                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                    // Also, for build both x32 and x64 versions
                    // you'll need to install `g++-multilib` package.
                    cCompiler.args '-isystem', "/usr/include/x86_64-linux-gnu"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                }
            }
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
            binaries.withType(SharedLibraryBinarySpec) {
                buildable = false
                def arch = ""
                if (targetPlatform.architecture.name == "x86") {
                    arch = "32"
                } else if (targetPlatform.architecture.name == "x86-64") {
                    arch = "64"
                }
                sharedLibraryFile = file(
                        "${nativeLibraryPath}/libJoystickHelper-${arch}.so")
            }
            sources.c.source {
                srcDir nativeLibraryPath
                include "*.c"
                include "*.h"
            }
        }
    }
}

test {
    systemProperty "java.library.path", nativeLibraryPath
    testlogger {
        // pick a theme - mocha, standard, plain, mocha-parallel,
        // standard-parallel or plain-parallel
        theme 'plain'
    }
}

run {
    systemProperty "java.library.path", nativeLibraryPath
}

task buildJoystickHelperLib {
    group = 'build'
    if (OperatingSystem.current().isLinux()) {
        dependsOn = [
                compileJava,
                'joystickHelperX86SharedLibrary',
                'joystickHelperX64SharedLibrary'
        ]
    } else {
        doLast {
            logger.error("Building joystickHelper library on Linux only")
        }
    }
}
